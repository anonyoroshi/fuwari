---

---

<!-- Astro.jsでは、<slot/>はコンポーネントが他のコンポーネントに埋め込まれる際のプレースホルダーとして機能します。 -->
<!-- つまり、他のコンポーネントから<GlobalStyles>を使用するときに、そのコンポーネント内の<slot/>部分は、<GlobalStyles>タグの間に配置されたコンテンツで置き換えられます。 -->
<!-- したがって、<GlobalStyles>コンポーネントが他のコンポーネントにインポートされるとき、下記<div><slot/></div>は、そのコンポーネントが<GlobalStyles>タグの間に配置する任意のコンテンツを受け入れるためのプレースホルダーとして機能します。   -->
<div>
    <slot/>
</div>

<!-- Astro.jsのコンポーネント内でグローバルなスタイルを定義するためのタグ -->
<!-- is:globalは、この<style>ブロック内で定義されたCSSスタイルがグローバル（つまり、このコンポーネントだけでなく、全てのコンポーネントに適用）であることを示します。これがない場合、スタイルはそのコンポーネント内でのみ適用されます。 -->
<!-- lang="stylus"は、この<style>ブロック内でStylusというCSSプリプロセッサ言語を使用することを示します。-->
<!-- Stylusは、CSS の多くの機能に加えて、独自の機能や拡張機能を提供し、CSSをより効率的に書くための機能（変数、ミックスイン、関数など）を提供します。 -->
<!-- 下記Stylusコードは、is:global 属性を使用してグローバルスコープで定義されたstyleかつ、GlobalStylesコンポーネントの一部であり、Layoutコンポーネントにてimportされることで、サイト全体のスタイルを定義しています。 -->
<!-- 各ミックスイン(関数)は、厳密には引数を受け取って処理を行うCSSルールセットのテンプレートですが、ほぼ関数と同様の意味を持ちます。 -->
<!-- substr() や convert() などの関数は、Stylus の組み込み関数です。 -->
<!-- また、stylus内では、rgba()など、CSS標準関数も利用可能です。 -->
<!-- コード全体は、OKLCH 色空間に関する知識を必要とします。 -->

<!-- 【注意点】ここから -->
<!-- Astro.jsでは、コンポーネントは自己完結型であり、それぞれが独自のスコープを持っています。 -->
<!-- したがって、GlobalStyles.astroファイル内で定義されたスタイルは、そのコンポーネントが他のコンポーネントにインポートされて使用されるまで、他のコンポーネントに影響を与えません。 -->
<!-- is:global属性を使用すると、そのスタイルブロック内で定義されたスタイルは全てのコンポーネントに適用されますが、それでもまだGlobalStylesコンポーネントがどこかでインスタンス化される必要があります。 -->
<!-- つまり、<GlobalStyles></GlobalStyles>としてどこかのコンポーネントで使用される必要があります。 -->
<!-- したがって、GlobalStyles.astroが他のコンポーネントにインポートされていない場合、またはインポートされていてもインスタンス化されていない場合、その中に定義されたスタイルはウェブサイト全体に影響を与えません。 -->
<!-- 【注意点】ここまで -->
<style is:global lang="stylus">

/* utils */
/* 白色の透明度(引数:a)を調整するstylusで作成されたミックスイン(関数) */
/* aは透明度を表し、0から1の範囲の値を取ります。 */
white(a)
  rgba(255, 255, 255, a)

/* 黒色の透明度(引数:a)を調整するstylusで作成されたミックスイン(関数) */
/* aは透明度を表し、0から1の範囲の値を取ります。 */
black(a)
  rgba(0, 0, 0, a)

/* OKLCH色空間とは */
/* OKLCH色空間は、LCH色空間の色空間で、明度(Lightness)、色相(Hue)、彩度(Chroma)の並び順で3つの要素で色を表現します。 */
/* OKLCH関数における引数の順番は、LCHの順番で固定されています。つまり、明度 (L)、彩度 (C)、色相 (H) の3つの値を左から順番通りに指定する必要があります。 */
/* OKLCH色空間では、明度（L）は0から1の範囲で表され、1に近いほど明るく、0に近いほど暗くなります。 */
/* 例えば、oklch(0 0 0)は、明度、彩度、色相すべてが0の色を表します。これは、色空間の原点に相当し、結果として黒色を表します。 */

/* OKLCH色空間の色かどうかを判定するstylusで作成されたミックスイン(関数) */
isOklch(c)
  return substr(c, 0, 5) == 'oklch'

/* OKLCH色空間の色をフォールバック色に変換するstylusで作成されたミックスイン(関数) */
oklch_fallback(c)
  str = '' + c    // convert color value to string
  if isOklch(str)
    return convert(oklchToHex(str))
  return c

/* 色のセットを定義するstylusで作成されたミックスイン(関数) */
/* colorsという引数を受け取り、colorsの各要素に対して、ルート要素に対応するCSSカスタムプロパティを定義する。 */
/* 具体的には、引数として色のマップ（キーと値のペア）を受け取り、それを使用してCSSカスタムプロパティを設定します。これらのプロパティは、ウェブページ全体で使用できます。 */
color_set(colors)
  /* 接続ブラウザがOKLCH色空間がサポートされているかを下記、CSSの機能検出ルール(oklch(0 0 0))を使用して確認 */
  /* 接続ブラウザがOKLCH色空間をサポートしている場合の処理 */
  /* OKLCH色空間の色をそのまま使用 */
  @supports (color: oklch(0 0 0))
    :root
      for key, value in colors
        {key}: value[0]
    :root.dark
      for key, value in colors
        if length(value) > 1
          {key}: value[1]
  /* 接続ブラウザがOKLCH色空間をサポートしていない場合の処理 */
  /* OKLCH色空間の色をHEX色に変換してフォールバック色として使用 */
  @supports not (color: oklch(0 0 0))
    :root
      for key, value in colors
        {key}: oklch_fallback(value[0])
    :root.dark
      for key, value in colors
        if length(value) > 1
          {key}: oklch_fallback(value[1])

/* ライトモードとダークモードでのグラデーション色を定義 */
rainbow-light = linear-gradient(to right, oklch(0.80 0.10 0), oklch(0.80 0.10 30), oklch(0.80 0.10 60), oklch(0.80 0.10 90), oklch(0.80 0.10 120), oklch(0.80 0.10 150), oklch(0.80 0.10 180), oklch(0.80 0.10 210), oklch(0.80 0.10 240), oklch(0.80 0.10 270), oklch(0.80 0.10 300), oklch(0.80 0.10 330), oklch(0.80 0.10 360))
rainbow-dark = linear-gradient(to right, oklch(0.70 0.10 0), oklch(0.70 0.10 30), oklch(0.70 0.10 60), oklch(0.70 0.10 90), oklch(0.70 0.10 120), oklch(0.70 0.10 150), oklch(0.70 0.10 180), oklch(0.70 0.10 210), oklch(0.70 0.10 240), oklch(0.70 0.10 270), oklch(0.70 0.10 300), oklch(0.70 0.10 330), oklch(0.70 0.10 360))

/* ルート要素(HTML文書の最上位に位置する要素HTMLでは、htmlタグを指す)のスタイルを定義 */
/* ルート要素は、HTML文書全体に適用されるスタイルを定義するためのセレクタ */
:root
  /* 要素の角の丸みを定義します。値1remは、ルート要素のフォントサイズに相当する単位で、この場合は要素の角の丸みを表します。 */
  --radius-large 1rem
  /* ホームページと他のページのバナーの高さを定義します。値60vhと40vhは、ビューポートの高さの60%と40%をそれぞれ表します。 */
  --banner-height-home 60vh
  --banner-height 40vh
  /* ページのコンテンツの表示遅延時間を定義します。値150msは、150ミリ秒を表します。(アニメーションや遷移のタイミングを制御する目的で利用されることが多いです。) */
  --content-delay 150ms

/* --で始まる変数は、CSSカスタムプロパティ（またはCSS変数）と呼ばれます。 */
/* CSSカスタムプロパティは、CSSの値を保持するための変数で、値を再利用することができます。 */
/* この場合、--primary、・・・、--display-dark-iconの各変数に、色のセットを適用します。 */
/* --primary:のようにコロン(:)がついている場合、それはCSSカスタムプロパティの定義を表します。 */
/* 一方、コロンがつかない場合、それはCSSカスタムプロパティを参照しています。例えば、var(--radius-large)は、--radius-largeという名前のCSSカスタムプロパティの値を取得します。 */
/* 例えば、--primary: oklch(0.70 0.14 var(--hue)) oklch(0.75 0.14 var(--hue))は、--primaryという名前のCSSカスタムプロパティに、oklch(0.70 0.14 var(--hue))とoklch(0.75 0.14 var(--hue))という2つの色を定義します。 */
/* 
また、以下のように、CSSカスタムプロパティを使用して、ボタンの背景色を設定することなども可能です。
この例では、button要素の背景色を--primaryの値に設定しています。var(--primary)は、--primaryという名前のCSSカスタムプロパティの現在の値を取得します。
button {
  background-color: var(--primary);
}
--primaryは、2つの色値を保持しており、本プロジェクトではそれぞれはライトテーマとダークテーマで使用される値となります。
このように、CSSカスタムプロパティとメディアクエリやJavaScriptを使用することで、現在のテーマに応じてテーマカラーを簡単に変更することができます。
*/
/* 
このファイル内で定義したstylusのcolor_setミックスイン(関数)を使用して、ライト又はダークテーマや各WEBUI部品の色のセットを引数として取得し、
当該ミックスイン(関数)経由でユーザーのWEBUI上にOKLCH色空間又は、フォールバック色を適用します。
*/
color_set({
  --primary: oklch(0.70 0.14 var(--hue)) oklch(0.75 0.14 var(--hue)) // 主要な色
  --page-bg: oklch(0.95 0.01 var(--hue)) oklch(0.16 0.014 var(--hue)) // ページの背景色
  --card-bg: white oklch(0.23 0.015 var(--hue)) // カードの背景色

  --btn-content: oklch(0.55 0.12 var(--hue)) oklch(0.75 0.1 var(--hue)) // ボタンの内容の色

  --btn-regular-bg: oklch(0.95 0.025 var(--hue)) oklch(0.33 0.035 var(--hue)) // 通常のボタンの背景色
  --btn-regular-bg-hover: oklch(0.9 0.05 var(--hue)) oklch(0.38 0.04 var(--hue)) // ホバー時の通常のボタンの背景色
  --btn-regular-bg-active: oklch(0.85 0.08 var(--hue)) oklch(0.43 0.045 var(--hue)) // アクティブ時の通常のボタンの背景色

  --btn-plain-bg-hover: oklch(0.95 0.025 var(--hue)) oklch(0.17 0.017 var(--hue)) // ホバー時のプレーンボタンの背景色
  --btn-plain-bg-active: oklch(0.98 0.01 var(--hue)) oklch(0.19 0.017 var(--hue)) // アクティブ時のプレーンボタンの背景色

  --btn-card-bg-hover: oklch(0.98 0.005 var(--hue)) oklch(0.3 0.03 var(--hue)) // ホバー時のカードボタンの背景色
  --btn-card-bg-active: oklch(0.9 0.03 var(--hue)) oklch(0.35 0.035 var(--hue)) // アクティブ時のカードボタンの背景色

  --enter-btn-bg: var(--btn-regular-bg) // 入力ボタンの背景色
  --enter-btn-bg-hover: var(--btn-regular-bg-hover) // ホバー時の入力ボタンの背景色
  --enter-btn-bg-active: var(--btn-regular-bg-active) // アクティブ時の入力ボタンの背景色

  --deep-text: oklch(0.25 0.02 var(--hue)) // 深いテキストの色

  --title-active: oklch(0.6 0.1 var(--hue)) // アクティブなタイトルの色

  --line-divider: black(0.08) white(0.08) // ラインディバイダーの色

  --line-color: black(0.1) white(0.1) // ラインの色
  --meta-divider: black(0.2) white(0.2) // メタディバイダーの色

  --inline-code-bg: var(--btn-regular-bg) // インラインコードの背景色
  --inline-code-color: var(--btn-content) // インラインコードの色
  --selection-bg: oklch(0.90 0.05 var(--hue)) oklch(0.40 0.08 var(--hue)) // 選択部分の背景色
  --codeblock-selection: oklch(0.40 0.08 var(--hue)) // コードブロックの選択部分の色
  --codeblock-bg: oklch(0.2 0.015 var(--hue)) oklch(0.17 0.015 var(--hue)) // コードブロックの背景色

  --license-block-bg: black(0.03) var(--codeblock-bg) // ライセンスブロックの背景色

  --link-underline: oklch(0.93 0.04 var(--hue)) oklch(0.40 0.08 var(--hue)) // リンクの下線の色
  --link-hover: oklch(0.95 0.025 var(--hue)) oklch(0.40 0.08 var(--hue)) // ホバー時のリンクの色
  --link-active: oklch(0.90 0.05 var(--hue)) oklch(0.35 0.07 var(--hue)) // アクティブなリンクの色

  --float-panel-bg: white oklch(0.19 0.015 var(--hue)) // フロートパネルの背景色

  --scrollbar-bg-light: black(0.4) // ライトテーマのスクロールバーの背景色
  --scrollbar-bg-hover-light: black(0.5) // ライトテーマのホバー時のスクロールバーの背景色
  --scrollbar-bg-active-light: black(0.6) // ライトテーマのアクティブ時のスクロールバーの背景色

  --scrollbar-bg-dark: white(0.4) // ダークテーマのスクロールバーの背景色
  --scrollbar-bg-hover-dark: white(0.5) // ダークテーマのホバー時のスクロールバーの背景色
  --scrollbar-bg-active-dark: white(0.6) // ダークテーマのアクティブ時のスクロールバーの背景色

  --scrollbar-bg: var(--scrollbar-bg-light) var(--scrollbar-bg-dark) // スクロールバーの背景色
  --scrollbar-bg-hover: var(--scrollbar-bg-hover-light) var(--scrollbar-bg-hover-dark) // ホバー時のスクロールバーの背景色
  --scrollbar-bg-active: var(--scrollbar-bg-active-light) var(--scrollbar-bg-active-dark) // アクティブ時のスクロールバーの背景色

  --color-selection-bar: rainbow-light rainbow-dark // 色選択バーの色

  --display-light-icon: 1 0 // ライトアイコンの表示
  --display-dark-icon: 0 1 // ダークアイコンの表示
})


/* 一部のグローバルスタイル */
/* ユーザーがテキストを選択したときの背景色を設定 */
::selection
  background-color: var(--selection-bg)

/* スクロールバーの基本スタイルを設定 */
.scrollbar-base.os-scrollbar
  transition: width 0.15s ease-in-out, height 0.15s ease-in-out, opacity 0.15s, visibility 0.15s, top 0.15s, right 0.15s, bottom 0.15s, left 0.15s;
  pointer-events: unset;
  &.os-scrollbar-horizontal
    padding-top: 4px;
    padding-bottom: 4px;
    height: 16px;
    .os-scrollbar-track .os-scrollbar-handle
      height: 4px;
      border-radius: 4px;
    &:hover
      .os-scrollbar-track .os-scrollbar-handle
        height: 8px;
    &.px-2
      padding-left: 8px;
      padding-right: 8px;
  &.os-scrollbar-vertical
    padding-left: 4px;
    padding-right: 4px;
    width: 16px;
    .os-scrollbar-track .os-scrollbar-handle
      width: 4px;
      border-radius: 4px;
    &:hover
      .os-scrollbar-track .os-scrollbar-handle
        width: 8px;
    &.py-1
      padding-top: 4px;
      padding-bottom: 4px;

/* 自動スクロールバーのスタイルを設定 */
.scrollbar-auto
  &.os-scrollbar
    --os-handle-bg: var(--scrollbar-bg);
    --os-handle-bg-hover: var(--scrollbar-bg-hover);
    --os-handle-bg-active: var(--scrollbar-bg-active);

/* ダークテーマのスクロールバーのスタイルを設定 */
.scrollbar-dark
  &.os-scrollbar
    --os-handle-bg: var(--scrollbar-bg-dark);
    --os-handle-bg-hover: var(--scrollbar-bg-hover-dark);
    --os-handle-bg-active: var(--scrollbar-bg-active-dark);

/* ライトテーマのスクロールバーのスタイルを設定 */
.scrollbar-light
  &.os-scrollbar
    --os-handle-bg: var(--scrollbar-bg-light);
    --os-handle-bg-hover: var(--scrollbar-bg-hover-light);
    --os-handle-bg-active: var(--scrollbar-bg-active-light);    


</style>


<style is:global>
/* Tailwind CSSの基本、コンポーネント、ユーティリティスタイルを適用 */
/*
Tailwind CSSは、ユーティリティファーストのCSSフレームワークで、スタイルをレイヤーに分けて管理します。
これらのレイヤーは、base、components、utilitiesの3つがあります。

baseレイヤーは最も低い優先度を持ち、ブラウザのデフォルトスタイルをリセットし、新しいデフォルトスタイルを設定します。
componentsレイヤーは中間の優先度を持ち、再利用可能なコンポーネントのスタイルを定義します。
  これは、ボタンやカードなどのコンポーネントに対するスタイルを定義するために使用されます。
utilitiesレイヤーは最も高い優先度を持ち、ユーティリティクラスを定義します。
  これは、marginやpadding、colorなどの単一のプロパティを操作するためのクラスを提供します。
したがって、同じCSSプロパティを持つスタイルが複数のレイヤーで定義されている場合、utilitiesレイヤーのスタイルが最終的に適用されます。
  これは、ユーティリティファーストの設計原則に基づいており、ユーティリティクラスを使用して細かいスタイル調整を行うことを可能にしています。
*/
@tailwind base;
@tailwind components;
@tailwind utilities;

/* @layer componentsは、その後に続くスタイルがcomponentsレイヤーに追加されることを意味します。 */
/* これにより、そのスタイルはbaseレイヤーとutilitiesレイヤーの間、つまり全てのユーティリティクラスよりも優先度が低く、baseスタイルよりも優先度が高くなります。 */
@layer components {
    /* カードの基本スタイルを定義 */
    .card-base {
        @apply rounded-[var(--radius-large)] overflow-hidden bg-[var(--card-bg)] transition;
    }
    /* 一般的なHTML要素にトランジション効果を適用 */
    h1, h2, h3, h4, h5, h6, p, a, span, li, ul, ol, blockquote, code, pre, table, th, td, strong {
        @apply transition;
    }
    /* カードにオブジェクトの影のように見える視覚効果を追加 */
    .card-shadow {
        @apply drop-shadow-[0_2px_4px_rgba(0,0,0,0.005)]
    }
    /* リンクの基本スタイルを定義 */
    .link {
        @apply transition hover:bg-[var(--link-hover)] active:bg-[var(--link-active)] rounded-md p-1 -m-1;
    }
    /* 大きなリンクのスタイルを定義 */
    .link-lg {
        @apply transition hover:bg-[var(--link-hover)] active:bg-[var(--link-active)] rounded-md p-1.5 -m-1.5;
    }
    /* フロートパネルの基本スタイルを定義 */
    .float-panel {
        @apply top-[5.25rem] rounded-[var(--radius-large)] overflow-hidden bg-[var(--float-panel-bg)] transition shadow-xl dark:shadow-none
    }
    /* 閉じた状態のフロートパネルのスタイルを定義 */
    .float-panel.closed {
        @apply top-[4.75rem] opacity-0 pointer-events-none
    }
    /* 検索パネルのマークスタイルを定義 */
    .search-panel mark {
        @apply bg-transparent text-[var(--primary)]
    }
    /* カードボタンのスタイルを定義 */
    .btn-card {
        @apply transition flex items-center justify-center bg-[var(--card-bg)] hover:bg-[var(--btn-card-bg-hover)]
        active:bg-[var(--btn-card-bg-active)]
    }
    /* 無効化されたカードボタンのスタイルを定義 */
    .btn-card.disabled {
        @apply pointer-events-none text-black/10 dark:text-white/10
    }
    /* プレーンボタンのスタイルを定義 */
    .btn-plain {
        @apply transition flex items-center justify-center bg-none hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)]
        text-black/75 hover:text-[var(--primary)] dark:text-white/75 dark:hover:text-[var(--primary)]
    }
    /* レギュラーボタンのスタイルを定義 */
    .btn-regular {
        @apply transition flex items-center justify-center bg-[var(--btn-regular-bg)] hover:bg-[var(--btn-regular-bg-hover)] active:bg-[var(--btn-regular-bg-active)]
        text-[var(--btn-content)] dark:text-white/75
    }
    /* 下線付きリンクのスタイルを定義 */
    .link-underline {
        @apply transition underline decoration-2 decoration-dashed decoration-[var(--link-underline)]
        hover:decoration-[var(--link-hover)] active:decoration-[var(--link-active)] underline-offset-[0.25rem]
    }

    /* テキストの透明度n%(下記例では、25%～90%)のスタイルを定義 */
    .text-90 {
        @apply text-black/90 dark:text-white/90
    }
    .text-75 {
        @apply text-black/75 dark:text-white/75
    }
    .text-50 {
        @apply text-black/50 dark:text-white/50
    }
    .text-30 {
        @apply text-black/30 dark:text-white/30
    }
    .text-25 {
        @apply text-black/25 dark:text-white/25
    }
    /* 変化中のHTML要素にフェードトランジションを適用 */
    /* 下記では、すべてのプロパティにトランジション効果を適用し、そのトランジションの持続時間を200ミリ秒(0.2秒)に設定します。 */
    html.is-changing .transition-fade {
        @apply transition-all duration-200
    }
    /* アニメーション中のHTML要素にフェードトランジションを適用 */
    /* 下記では、要素の透明度を0に設定し（完全に透明）、要素をY軸方向（垂直方向）に-4単位(つまり、要素を下に4単位)移動します。 */
    html.is-animating .transition-fade {
        @apply opacity-0 translate-y-4
    }
}

@keyframes fade-in-up {
    0% {
        transform: translateY(2rem);
        opacity: 0;
    }
    100% {
        transform: translateY(0);
        opacity: 1;
    }
}
.onload-animation {
    opacity: 0;
    animation: 300ms fade-in-up;
    animation-fill-mode: forwards;
}
#top-row {
    animation-delay: 0ms
}
#sidebar {
    animation-delay: 100ms
}
#content-wrapper {
    animation-delay: var(--content-delay);
}
#footer {
    animation-delay: 400ms;
}


</style>