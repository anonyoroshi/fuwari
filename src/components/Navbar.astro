---
// src/components/Navbar.astro
// AstroとSvelteを使用して作成されたナビゲーションバーのコンポーネントです。
import { Icon } from 'astro-icon/components';
import DisplaySettings from "./widget/DisplaySettings.svelte";
import { LinkPreset } from "../types/config";
import { type NavBarLink } from "../types/config";
import {navBarConfig, siteConfig} from "../config";
import NavMenuPanel from "./widget/NavMenuPanel.astro";
import Search from "./Search.svelte";
// navBarConfig.links.map関数で利用するために、LinkPresets(homeやaboutなどの実際のリンク情報セット)をインポートします。
import {LinkPresets} from "../constants/link-presets";
const className = Astro.props.class;

// 1. ナビゲーションバーのリンクは、configファイル内の`navBarConfig.links`から取得され、それぞれが`NavBarLink`型または`LinkPreset`型です。
// `LinkPreset`は数値で、対応するリンク情報を`LinkPresets`から取得します。
// map関数を使用してNavBarLink型の配列に変換されます。この変換過程で、LinkPresetの値は対応するリンク情報に置き換えられます。
// 結果として、このコードはナビゲーションバーのリンクの設定を柔軟に管理することを可能にします。
// プリセットのリンク（LinkPreset）とカスタムのリンク（直接オブジェクト）を混在させることができ、それらを統一的に扱うことができます。
let links: NavBarLink[] = navBarConfig.links.map((item: NavBarLink | LinkPreset): NavBarLink => {
    if (typeof item === "number") {
        // LinkPresets内で、実際のリンク情報を取得
        return LinkPresets[item]
    }
    return item;
});

---
<!-- 2. ナビゲーションバーデザイン部分には、サイトのタイトルとホームへのリンク、ナビゲーションリンク、検索バー、表示設定ボタン、ライト/ダークモード切り替えボタン、メニューボタンを含みます。 -->
<div class:list={[
    className,
    "card-base sticky top-0 overflow-visible max-w-[var(--page-width)] h-[4.5rem] rounded-t-none mx-auto flex items-center justify-between px-4"]}>
    <a href="/" class="btn-plain h-[3.25rem] px-5 font-bold rounded-lg active:scale-95">
        <div class="flex flex-row text-[var(--primary)] items-center text-md">
            <Icon name="material-symbols:home-outline-rounded" size={"1.75rem"} class="mb-1 mr-2" />
            {siteConfig.title}
        </div>
    </a>
    <div class="hidden md:flex">
        {links.map((l) => {
            return <a aria-label={l.name} href={l.url} target={l.external ? "_blank" : null}
                      class="btn-plain h-11 font-bold px-5 rounded-lg active:scale-95"
            >
                <div class="flex items-center">
                    {l.name}
                    {l.external && <Icon size="14" name="fa6-solid:arrow-up-right-from-square" class="transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                </div>
            </a>;
        })}
    </div>
    <div class="flex">
        <!--<SearchPanel client:load>-->
        <Search client:load>
            <Icon slot="search-icon" name="material-symbols:search" size={"1.25rem"} class="absolute pointer-events-none ml-3 transition my-auto text-black/30 dark:text-white/30"></Icon>
            <!--<Icon slot="arrow-icon" name="material-symbols:chevron-right-rounded" size={"1.25rem"} class="transition my-auto text-[var(&#45;&#45;primary)]"></Icon>-->
            <Icon slot="arrow-icon" name="fa6-solid:chevron-right" size={"0.75rem"} class="transition translate-x-0.5 my-auto text-[var(--primary)]"></Icon>
            <Icon slot="search-switch" name="material-symbols:search" size={"1.25rem"}></Icon>
        </Search>
        <button aria-label="Display Settings" class="btn-plain h-11 w-11 rounded-lg active:scale-90" id="display-settings-switch">
            <Icon name="material-symbols:palette-outline" size={"1.25rem"}></Icon>
        </button>
        <button aria-label="Light/Dark Mode" class="btn-plain h-11 w-11 rounded-lg active:scale-90" id="scheme-switch">
            <Icon name="material-symbols:wb-sunny-outline-rounded" size={"1.25rem"} class="absolute opacity-[var(--display-light-icon)]"></Icon>
            <Icon name="material-symbols:dark-mode-outline-rounded" size={"1.25rem"} class="absolute opacity-[var(--display-dark-icon)]"></Icon>
        </button>
        <button aria-label="Menu" name="Nav Menu" class="btn-plain w-11 h-11 rounded-lg active:scale-90 md:hidden" id="nav-menu-switch">
            <Icon name="material-symbols:menu-rounded" size={"1.25rem"}></Icon>
        </button>
    </div>
    <NavMenuPanel links={links}></NavMenuPanel>
    <DisplaySettings client:only="svelte">
        <Icon slot="restore-icon" name="fa6-solid:arrow-rotate-left" size={"0.875rem"} class=""></Icon>
    </DisplaySettings>
</div>

<style lang="stylus">
</style>

<script>

// テーマの切り替えを行う関数
function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

// 3. ボタンのクリックイベントは、`loadButtonScript`関数で設定されます。
// これには、テーマの切り替え、表示設定パネルの表示/非表示、ナビゲーションメニューパネルの表示/非表示が含まれます。
function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    switchBtn.addEventListener("click", function () {
        switchTheme()
    });

    let settingBtn = document.getElementById("display-settings-switch");
    settingBtn.addEventListener("click", function () {
        let settingPanel = document.getElementById("display-setting");
        settingPanel.classList.toggle("closed");
    });

    let menuBtn = document.getElementById("nav-menu-switch");
    menuBtn.addEventListener("click", function () {
        let menuPanel = document.getElementById("nav-menu-panel");
        menuPanel.classList.toggle("closed");
    });
}

loadButtonScript();

// 4. Astroの`astro:after-swap`イベントリスナーは、ページが切り替えられた後に`loadButtonScript`を再度呼び出します。
// これにより、新しいページでもボタンのイベントが正しく設定されます。
document.addEventListener('astro:after-swap', () => {
    loadButtonScript();
}, { once: false });
</script>

<!-- 5. 最後に、本番環境では`loadPagefind`関数が呼び出され、ページ検索機能が初期化されます。 -->
<!-- import.meta.env.PRODがtrue(つまり、現在が本番環境Production Environment)の場合にのみ、script is:raw以下のコードが実行されます。 -->
{import.meta.env.PROD && <script is:raw>
async function loadPagefind() {
    const pagefind = await import('/pagefind/pagefind.js')
    await pagefind.options({
        'excerptLength': 20
    })
    pagefind.init()
    window.pagefind = pagefind
    pagefind.search('')     // speed up the first search
}
loadPagefind()
</script>}