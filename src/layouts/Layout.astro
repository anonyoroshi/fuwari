---
// @エイリアスはastro.jsでは、デフォルトで@がソースディレクトリ（通常はsrc/）を指すように設定されており、astro.config.js又はastro.config.mjsファイルで変更することができます。
// 本プロジェクトはデフォルト通りであるため、@エイリアスを使用して、src/ディレクトリ内のファイルをインポートしています。
import GlobalStyles from "@components/GlobalStyles.astro";
// 以下は、nodeパッケージの@fontsource/robotoでインストールしたRobotoフォントを読み込んでいます。
// 500は中程度の太さ、700は太い（bold）を表します。
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';
// ローカルの画像と外部の画像を表示するためのImageWrapperコンポーネントをインポートしています。
// ローカルの画像は動的にインポートされ、外部の画像は直接URLを指定して表示されます。
// また、画像の上に透明なレイヤーを重ねる機能もあります。
import ImageWrapper from "@components/misc/ImageWrapper.astro";

// URLの生成、パスの比較、ディレクトリの取得など、URLとパスに関連する操作を行うためのユーティリティ関数をインポートしています。
import {pathsEqual} from "@utils/url-utils";
// サイトの設定情報（具体的にはテーマの色相）を取得するためにConfigCarrierコンポーネントをインポートしています。
import ConfigCarrier from "@components/ConfigCarrier.astro";
// @エイリアスにより、src/congif.tsファイルから、siteConfigという名前のオブジェクトをインポートして、サイト設定情報を取得しています。
import {siteConfig} from "@/config";

// 下記PropsはTypeScriptのインターフェースを定義しています。
// このインターフェースは、Astroコンポーネントに渡されるプロパティの型を定義しています。
// この場合、Propsインターフェースはtitleという名前の文字列型のプロパティと、
// bannerという名前のオプショナルな（つまり存在しなくても良い）文字列型のプロパティを持つことを要求しています。
// 
// Astro.jsやReactなどのコンポーネントベースのフレームワークでは、
// Propsはコンポーネントに渡されるプロパティ（引数）の型を定義するためによく使われます。
// これにより、コンポーネントが期待するプロパティの型を明示的に示すことができ、型安全性を向上させることができます。
interface Props {
	title: string;
	banner?: string;
}

let { title, banner } = Astro.props;

const isHomePage = pathsEqual(Astro.url.pathname, '/');

// 現在のURLのパス名を取得してtestPathNameという定数に格納しています。
const testPathName = Astro.url.pathname;

// 【課題】【エラーにならないか検証目的】下記、animとmyFadeは定義されているが使われてない模様なので、コメントアウト　ここから
// const anim = {
// 	old: {
// 		name: 'fadeIn',
// 		duration: '4s',
// 		easing: 'linear',
// 		fillMode: 'forwards',
// 		mixBlendMode: 'normal',
// 	},
// 	new: {
// 		name: 'fadeOut',
// 		duration: '4s',
// 		easing: 'linear',
// 		fillMode: 'backwards',
// 		mixBlendMode: 'normal',
// 	}
// };

// const myFade = {
// 	forwards: anim,
// 	backwards: anim,
// };
// 【課題】【エラーにならないか検証目的】下記、animとmyFadeは定義されているが使われてない模様なので、コメントアウト　ここまで

// defines global css variables
// サイト全体で使用するCSS変数の定義を行うセクション
// 全体のスタイルを定義するためにはGlobalStylesコンポーネントを使用し、ページのレイアウトを定義するためにはLayoutコンポーネントを使用するのが最善
// 全体のスタイルをLayoutコンポーネントに移動すると、そのスタイルはLayoutコンポーネントを使用しないページには適用されません。これは、全体のスタイルを一貫して適用するための最善の方法ではないため。
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
// なぜGlobalStylesではなくLayoutでCSS変数の定義を行うのか
// Astro.jsの仕様について、Layoutコンポーネントは各ページで一度だけ読み込まれ、その設定は全ページに適用されます。
// 一方、GlobalStylesなどの他のコンポーネントはページごとに再読み込みされ、その設定はページごとに再実行されます。
// そのため、全ページで一貫した設定を適用するためには、Layoutコンポーネント内で設定を行うのが適切です。

// サイトのテーマ色を設定しています。
const configHue = siteConfig.themeHue;
// 【バナーを動的に変更】bannerが未定義、または空文字列の場合、siteConfig.banner.srcからバナー画像のURLを取得して設定します
if (!banner || typeof banner !== 'string' || banner.trim() === '') {
	banner = siteConfig.banner.src;
}

// TODO don't use post cover as banner for now
// 現在のところ投稿のカバー画像をバナーとして使用しないようにするための一時的な処置として、siteConfig.banner.srcをバナー画像のURLとして設定しています。
// つまり、srcに設定済みのassets/images/demo-banner.pngをbannerに設定しています。
banner = siteConfig.banner.src;
// バナーを表示するかどうかを制御するフラグを設定しています。
// このフラグは、siteConfig.banner.enableの値を取得していますが、この値はconfig.tsファイルでFalseに設定されているため、バナーは表示されません。
const enableBanner = siteConfig.banner.enable;

// pageTitle変数を設定しています。
// titleが存在する場合、titleとsiteConfig.titleを組み合わせてページタイトルを作成します。
// titleが存在しない場合は、siteConfig.titleとsiteConfig.subtitleを組み合わせてページタイトルを作成します。
// これにより、各ページで適切なタイトルが表示されます。
let pageTitle;
if (title) {
	pageTitle = `${title} - ${siteConfig.title}`;
} else {
	pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`;
}

---

<!DOCTYPE html>
<html lang="en" data-isHome={isHomePage} data-pathname={testPathName} class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]">
	<head>

		<title>{pageTitle}</title>

		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link rel="icon" media="(prefers-color-scheme: light)" href="/favicon/favicon-light-32.png" sizes="32x32">
		<link rel="icon" media="(prefers-color-scheme: light)" href="/favicon/favicon-light-128.png" sizes="128x128">
		<link rel="icon" media="(prefers-color-scheme: light)" href="/favicon/favicon-light-180.png" sizes="180x180">
		<link rel="icon" media="(prefers-color-scheme: light)" href="/favicon/favicon-light-192.png" sizes="192x192">
		<link rel="icon" media="(prefers-color-scheme: dark)"  href="/favicon/favicon-dark-32.png" sizes="32x32">
		<link rel="icon" media="(prefers-color-scheme: dark)"  href="/favicon/favicon-dark-128.png" sizes="128x128">
		<link rel="icon" media="(prefers-color-scheme: dark)"  href="/favicon/favicon-dark-180.png" sizes="180x180">
		<link rel="icon" media="(prefers-color-scheme: dark)"  href="/favicon/favicon-dark-192.png" sizes="192x192">

		<link rel="stylesheet" href="https://cdn.staticfile.org/KaTeX/0.16.9/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">

		<style define:vars={{ configHue }}></style>  <!-- defines global css variables. This will be applied to <html> <body> and some other elements idk why -->

	</head>
	<body class=" min-h-screen transition " class:list={[{"data-is-home": isHomePage, "enable-banner": enableBanner}]}>
		<ConfigCarrier></ConfigCarrier>
		<GlobalStyles>
		<div id="banner-wrapper" class="absolute w-full">
			<ImageWrapper id="boxtest" alt="Banner image of the blog" class:list={["object-center object-cover h-full", {"hidden": !siteConfig.banner.enable}]}
					  src={siteConfig.banner.src}
			>
			</ImageWrapper>
		</div>
		<slot />
		</GlobalStyles>
	</body>
</html>
<style is:global>
	:root {
		--hue: var(--configHue);
		--page-width: 75rem;
	}
</style>
<style is:global>
@tailwind components;
@tailwind utilities;

@layer components {
	/* TODO: temporarily make banner height same for all pages since I cannot make the transition feel good
		I want to make the height transition parallel with the content transition instead of blocking it
	*/

	/*
	.enable-banner.data-is-home #banner-wrapper {
		@apply h-[var(--banner-height)] md:h-[var(--banner-height-home)]
	}
	*/
	.enable-banner #banner-wrapper {
		@apply h-[var(--banner-height)]
	}

	/*
	.enable-banner.data-is-home #top-row {
		@apply h-[calc(var(--banner-height)_-_4.5rem)] md:h-[calc(var(--banner-height-home)_-_4.5rem)]
	}
	*/
	.enable-banner #top-row {
		@apply h-[calc(var(--banner-height)_-_4.5rem)]
	}
}
</style>
<script>
import 'overlayscrollbars/overlayscrollbars.css';
import {
	OverlayScrollbars,
	ScrollbarsHidingPlugin,
	SizeObserverPlugin,
	ClickScrollPlugin
} from 'overlayscrollbars';
import {getHue, setHue} from "../utils/setting-utils";

// フォントのプリロードは、ウェブページのパフォーマンスを向上させるための一般的なテクニックですが、特に、ウェブフォントを使用する場合、フォントのダウンロードと解析に時間がかかるため、ページのレンダリングが遅延することがあります。
// これは、れは「FOIT（Flash of Invisible Text）」または「FOUT（Flash of Unstyled Text）」と呼ばれます。
// FOITは、フォントが読み込まれるまでテキストが完全に見えなくなる現象で、FOUTは、フォントが読み込まれるまでテキストがデフォルトのフォントで表示される現象です。これらの現象はユーザー体験を損なう可能性があります。
// フォントのプリロードにより、これらの問題を緩和することができます。プリロードは、ブラウザに対して特定のリソース（この場合はフォント）を可能な限り早くダウンロードするように指示します。これにより、フォントの読み込みが完了するまでの時間を短縮し、FOITやFOUTを防ぐことができます。
// ただし、プリロードはの重要なリソースのダウンロードを遅延させる可能性があるため、下記Preload fontsはFuwari作者によりコメントアウトされていると推測されます。
	/* Preload fonts */
// (async function() {
// 	try {
// 		await Promise.all([
// 			document.fonts.load("400 1em Roboto"),
// 			document.fonts.load("700 1em Roboto"),
// 		]);
// 		document.body.classList.remove("hidden");
// 	} catch (error) {
// 		console.log("Failed to load fonts:", error);
// 	}
// })();

/* TODO This is a temporary solution for style flicker issue when the transition is activated */
/* issue link: https://github.com/withastro/astro/issues/8711, the solution get from here too */
/* update: fixed in Astro 3.2.4 */
function disableAnimation() {
	const css = document.createElement('style')
	css.appendChild(
		document.createTextNode(
			`*{
              -webkit-transition:none!important;
              -moz-transition:none!important;
              -o-transition:none!important;
              -ms-transition:none!important;
              transition:none!important
              }`
		)
	)
	document.head.appendChild(css)

	return () => {
		// Force restyle
		;(() => window.getComputedStyle(document.body))()

		// Wait for next tick before removing
		setTimeout(() => {
			document.head.removeChild(css)
		}, 1)
	}
}

function setClickOutsideToClose(panel: string, ignores: string[]) {
	document.addEventListener("click", event => {
		let panelDom = document.getElementById(panel);
		// EventTarget型のオブジェクト（この場合はevent.target）を、
		// Node型のメソッド（この場合はcontains）に渡すために型変換
		let tDom = event.target as Node;
		for (let ig of ignores) {
			let ie = document.getElementById(ig)
			if (ie == tDom || (ie?.contains(tDom))) {
				return;
			}
		}
		panelDom.classList.add("closed");
	});
}
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])


function loadTheme() {
	if (localStorage.theme === 'dark' || (!('theme' in localStorage) &&
		window.matchMedia('(prefers-color-scheme: dark)').matches)) {
		document.documentElement.classList.add('dark');
		localStorage.theme = 'dark';
	} else {
		document.documentElement.classList.remove('dark');
		localStorage.theme = 'light';
	}
}

function loadHue() {
	setHue(getHue())
}

function setBannerHeight() {
	const banner = document.getElementById('banner-wrapper');
	if (document.documentElement.hasAttribute('data-isHome')) {
		banner.classList.remove('banner-else');
		banner.classList.add('banner-home');
	} else {
		banner.classList.remove('banner-home');
		banner.classList.add('banner-else');
	}
}

function initCustomScrollbar() {
	OverlayScrollbars(
		// docs say that a initialization to the body element would affect native functionality like window.scrollTo
		// but just leave it here for now
		{
			target: document.querySelector('body'),
			cancel: {
				nativeScrollbarsOverlaid: true,    // don't initialize the overlay scrollbar if there is a native one
			}
		}, {
		scrollbars: {
			theme: 'scrollbar-base scrollbar-auto py-1',
			autoHide: 'move',
			autoHideDelay: 500,
			autoHideSuspend: false,
		},
	});
	document.querySelectorAll('pre').forEach((ele) => {
		OverlayScrollbars(ele, {
			scrollbars: {
				theme: 'scrollbar-base scrollbar-dark px-2',
				autoHide: 'leave',
				autoHideDelay: 500,
				autoHideSuspend: false
			}
		});
	});
}

function init() {
	// disableAnimation()()		// TODO
	setBannerHeight();
	loadTheme();
	loadHue();
	initCustomScrollbar();
}

/* Load settings when entering the site */
init();

/* Load settings before swapping */
/* astro:after-swap event happened before swap animation */
// astro:after-swapイベントは、ページ遷移のアニメーションが完了した後に発生します。
// これにより、新しいページに遷移した後も上記の初期設定が再度行われます。
document.addEventListener('astro:after-swap', init);

// TypeScriptにwindowオブジェクトがswupプロパティを持つことを伝える
// これにより、TypeScriptはwindow.swupを認識し、エラーを回避できる
declare global {
  interface Window {
    swup: any; // Replace 'any' with the actual type of 'swup' if known
  }
}

const setup = () => {
	// TODO: temp solution to change the height of the banner
/*
	window.swup.hooks.on('animation:out:start', () => {
		const path = window.location.data-pathname
		const body = document.querySelector('body')
		if (path[path.length - 1] === '/' && !body.classList.contains('data-is-home')) {
			body.classList.add('data-is-home')
		} else if (path[path.length - 1] !== '/' && body.classList.contains('data-is-home')) {
			body.classList.remove('data-is-home')
		}
	})
*/
	// Remove the delay for the first time page load
	window.swup.hooks.on('link:click', () => {
		document.documentElement.style.setProperty('--content-delay', '0ms')
	})
}
if (window.swup.hooks) {
	setup()
} else {
	document.addEventListener('swup:enable', setup)
}

</script>

<style is:global lang="stylus">
#banner-wrapper
	top: 0
	opacity: 1
.banner-closed
	#banner-wrapper
		top: -120px
		opacity: 0
</style>